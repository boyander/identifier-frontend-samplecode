{"mappings":"MAAM,eAAe;iBACL,CAAC;QACb,IAAI,CAAC,WAAW,GAAG,KAAK;IAC1B,CAAC;IAED,WAAW,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,GAAK,CAAC;YACvC,EAAE,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EAC/B,SAAS,CAAC,YAAY,CACpB,CAAC;gBAAC,KAAK,EAAE,IAAI;YAAC,CAAC,GACf,MAAM,GAAI,CAAC;gBACT,KAAK,CAAC,aAAa,GAAG,GAAG,CAAC,YAAY;gBACtC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,uBAAuB,CAAC,MAAM;gBACzD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;oBAAC,WAAW,EAAE,CAAC;gBAAC,CAAC;gBAC3D,OAAO,CAAC,GAAG,CAAC,CAA6C;gBACzD,OAAO,CAAC,IAAI,CAAC,QAAQ;YACvB,CAAC,EACD,MAAM;iBAEH,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,CAA0B;gBACtC,OAAO,CAAC,IAAI,CAAC,QAAQ;YACvB,CAAC;QACH,CAAC;IACH,CAAC;UAEK,KAAK,GAAG,CAAC;QACb,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW;YACvC,QAAQ,CAAC,MAAM;YACf,IAAI,CAAC,WAAW,GAAG,IAAI;QACzB,CAAC,MACC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAmB;IAEvC,CAAC;UAEK,IAAI,GAAG,CAAC;QACZ,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW;YACvC,QAAQ,CAAC,IAAI;YACb,KAAK,CAAC,CAAC,CAAC,GAAG,GAAE,IAAI,EAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,kBAAkB;YACnD,IAAI,CAAC,WAAW,GAAG,KAAK;YACxB,MAAM,CAAC,CAAC;gBAAC,GAAG;gBAAE,IAAI;YAAC,CAAC;QACtB,CAAC,MACC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAe;IAEnC,CAAC;IAED,kBAAkB,GAAG,CAAC;QACpB,EAAiD,AAAjD,+CAAiD;QACjD,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,GAAK,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,CAA2B;YACvC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAC,IAAI,GAAI,CAAC;gBAC/B,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI;gBAClC,IAAI,CAAC,QAAQ,CAAC,KAAK;gBACnB,OAAO,CAAC,CAAC;oBACP,GAAG;oBACH,IAAI;gBACN,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;;AAGH,eAAe,CAAC,MAAM,OAAS,CAAC;IAC9B,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,eAAe;IAClC,MAAM,CAAC,QAAQ;AACjB,CAAC","sources":["src/js/RecorderManager.js"],"sourcesContent":["class RecorderManager {\n  constructor() {\n    this.isRecording = false;\n  }\n\n  getRecorder(ready) {\n    return new Promise((resolve, reject) => {\n      if (!this.input || !this.recorder) {\n        navigator.getUserMedia(\n          { audio: true },\n          stream => {\n            const audio_context = new AudioContext();\n            this.input = audio_context.createMediaStreamSource(stream);\n            this.recorder = new Recorder(this.input, { numChannels: 1 });\n            console.log(\"Media stream created. Recorder initialised.\");\n            resolve(this.recorder);\n          },\n          reject\n        );\n      } else {\n        console.log(\"Reusing Recorder context\");\n        resolve(this.recorder);\n      }\n    });\n  }\n\n  async start() {\n    if (!this.isRecording) {\n      const recorder = await this.getRecorder();\n      recorder.record();\n      this.isRecording = true;\n    } else {\n      throw new Error(\"Already recording\");\n    }\n  }\n\n  async stop() {\n    if (this.isRecording) {\n      const recorder = await this.getRecorder();\n      recorder.stop();\n      const { url, blob } = await this.createDownloadLink();\n      this.isRecording = false;\n      return { url, blob };\n    } else {\n      throw new Error(\"Not Recording\");\n    }\n  }\n\n  createDownloadLink() {\n    // create WAV download link using audio data blob\n    return new Promise((resolve, reject) => {\n      console.log(\"Generating record data...\");\n      this.recorder.exportWAV(blob => {\n        var url = URL.createObjectURL(blob);\n        this.recorder.clear();\n        resolve({\n          url,\n          blob\n        });\n      });\n    });\n  }\n}\n\nRecorderManager.create = () => {\n  let instance = new RecorderManager();\n  return instance;\n};\n"],"names":[],"version":3,"file":"index.8c63b8a7.js.map","sourceRoot":"/__parcel_source_root/"}