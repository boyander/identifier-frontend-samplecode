{"mappings":"MAAMA,8BAEFC,KAAKC,aAAc,EAGrBC,YAAYC,GACV,OAAO,IAAIC,SAAO,CAAEC,EAASC,KACtBN,KAAKO,OAAUP,KAAKQ,UAavBC,QAAQC,IAAI,4BACZL,EAAQL,KAAKQ,WAbbG,UAAUC,aACR,CAAEC,OAAO,IACTC,IACE,MAAMC,EAAgB,IAAIC,aAC1BhB,KAAKO,MAAQQ,EAAcE,wBAAwBH,GACnDd,KAAKQ,SAAW,IAAIU,SAASlB,KAAKO,MAAO,CAAEY,YAAa,IACxDV,QAAQC,IAAI,+CACZL,EAAQL,KAAKQ,YAEfF,oBAUN,GAAKN,KAAKC,YAKR,MAAM,IAAImB,MAAM,4BAJOpB,KAAKE,eACnBmB,SACTrB,KAAKC,aAAc,eAOrB,GAAID,KAAKC,YAAa,QACGD,KAAKE,eACnBoB,OACT,MAAMC,IAAEA,EAAGC,KAAEA,SAAexB,KAAKyB,qBAEjC,OADAzB,KAAKC,aAAc,EACZ,CAAEsB,IAAAA,EAAKC,KAAAA,GAEd,MAAM,IAAIJ,MAAM,iBAIpBK,qBAEE,OAAO,IAAIrB,SAAO,CAAEC,EAASC,KAC3BG,QAAQC,IAAI,6BACZV,KAAKQ,SAASkB,WAAUF,IACtB,IAAID,EAAMI,IAAIC,gBAAgBJ,GAC9BxB,KAAKQ,SAASqB,QACdxB,EAAQ,CACNkB,IAAAA,EACAC,KAAAA,WAOVzB,gBAAgB+B,OAAM,IACL,IAAI/B","sources":["src/js/RecorderManager.js"],"sourcesContent":["class RecorderManager {\n  constructor() {\n    this.isRecording = false;\n  }\n\n  getRecorder(ready) {\n    return new Promise((resolve, reject) => {\n      if (!this.input || !this.recorder) {\n        navigator.getUserMedia(\n          { audio: true },\n          stream => {\n            const audio_context = new AudioContext();\n            this.input = audio_context.createMediaStreamSource(stream);\n            this.recorder = new Recorder(this.input, { numChannels: 1 });\n            console.log(\"Media stream created. Recorder initialised.\");\n            resolve(this.recorder);\n          },\n          reject\n        );\n      } else {\n        console.log(\"Reusing Recorder context\");\n        resolve(this.recorder);\n      }\n    });\n  }\n\n  async start() {\n    if (!this.isRecording) {\n      const recorder = await this.getRecorder();\n      recorder.record();\n      this.isRecording = true;\n    } else {\n      throw new Error(\"Already recording\");\n    }\n  }\n\n  async stop() {\n    if (this.isRecording) {\n      const recorder = await this.getRecorder();\n      recorder.stop();\n      const { url, blob } = await this.createDownloadLink();\n      this.isRecording = false;\n      return { url, blob };\n    } else {\n      throw new Error(\"Not Recording\");\n    }\n  }\n\n  createDownloadLink() {\n    // create WAV download link using audio data blob\n    return new Promise((resolve, reject) => {\n      console.log(\"Generating record data...\");\n      this.recorder.exportWAV(blob => {\n        var url = URL.createObjectURL(blob);\n        this.recorder.clear();\n        resolve({\n          url,\n          blob\n        });\n      });\n    });\n  }\n}\n\nRecorderManager.create = () => {\n  let instance = new RecorderManager();\n  return instance;\n};\n"],"names":["RecorderManager","this","isRecording","getRecorder","ready","Promise","resolve","reject","input","recorder","console","log","navigator","getUserMedia","audio","stream","audio_context","AudioContext","createMediaStreamSource","Recorder","numChannels","Error","record","stop","url","blob","createDownloadLink","exportWAV","URL","createObjectURL","clear","create"],"version":3,"file":"index.530cbd8c.js.map"}