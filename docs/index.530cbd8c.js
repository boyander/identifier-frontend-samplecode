class RecorderManager{constructor(){this.isRecording=!1}getRecorder(e){return new Promise(((e,r)=>{this.input&&this.recorder?(console.log("Reusing Recorder context"),e(this.recorder)):navigator.getUserMedia({audio:!0},(r=>{const o=new AudioContext;this.input=o.createMediaStreamSource(r),this.recorder=new Recorder(this.input,{numChannels:1}),console.log("Media stream created. Recorder initialised."),e(this.recorder)}),r)}))}async start(){if(this.isRecording)throw new Error("Already recording");(await this.getRecorder()).record(),this.isRecording=!0}async stop(){if(this.isRecording){(await this.getRecorder()).stop();const{url:e,blob:r}=await this.createDownloadLink();return this.isRecording=!1,{url:e,blob:r}}throw new Error("Not Recording")}createDownloadLink(){return new Promise(((e,r)=>{console.log("Generating record data..."),this.recorder.exportWAV((r=>{var o=URL.createObjectURL(r);this.recorder.clear(),e({url:o,blob:r})}))}))}}RecorderManager.create=()=>new RecorderManager;
//# sourceMappingURL=index.530cbd8c.js.map
